import React, { useEffect, useState } from "react";
import styled from "styled-components";

/**
 *   TwitterBird
 *
 *  @component
 *
 */
const TwitterBird = ( props ) => {
  
  const [ hovering, setHovering ] = useState( false );
  const [ centerOfBird, setCenter ] = useState( {} );
  const [ length, setLength ] = useState( 0 );
  
  useEffect( () => {
    
    const dashArray = document.querySelector( "#outline" );
    const twitter = document.querySelector( "#bird" );
    
    if( dashArray ){
      const dashLength = dashArray.getTotalLength();
      setLength( dashLength );
    }
    
    if( twitter ){
      
      const boundingBox = twitter.getBoundingClientRect();
      setCenter( {
        x: boundingBox.width / 2, y: boundingBox.height / 2,
      } );
    }
  }, [] );
  
  const setHover = () => {
    
    setHovering( true );
  };
  
  return (
    
    <TwitterIcon length={ length } onMouseLeave={ () => setHovering( false ) }
                 hovering={ hovering } boundingBox={ centerOfBird }>
      
      <svg onMouseEnter={ setHover } width="142" height="140"
           viewBox="0 0 142 140" fill="none"
           xmlns="http://www.w3.org/2000/svg">
        
        <g id="twitter">
          <rect id={ "twitter-background" } x="0.60022" width="141.399"
                height="140" rx="12"
                fill="#6EBEDF"/>
          <path id="bird"
                d="M69.3729 60.0746C72.956 49.5806 77.3353 42.78 82.3739 37.8501C86.1339 34.1706 88.074 33.0031 85.8674 37.0537C86.8421 36.3207 88.2453 35.3454 89.3332 34.8244C95.4303 32.1252 94.9979 34.3879 90.797 36.8134C102.261 32.9647 101.864 37.8657 89.7381 40.3068C99.6527 40.4821 110.193 46.4019 113.226 58.9938C113.645 60.7365 113.143 60.5709 115.045 60.8866C119.151 61.5686 123.014 61.5267 126.78 60.4043C126.373 63.0094 122.706 64.7021 116.984 65.8204C114.865 66.2344 114.43 66.1256 116.971 66.6619C120.099 67.3221 123.599 67.493 127.3 67.3303C124.417 70.4433 119.823 72.0351 114.14 72.1003C110.586 84.279 102.464 93.0001 92.1849 98.474C68.05 111.328 32.9174 109.463 15.3 86.1024C26.8601 94.6142 43.9863 96.4892 56.7059 84.6252C48.3735 84.6269 46.2157 78.7717 52.8216 75.6086C46.5657 75.5486 42.589 73.6921 40.255 70.3296C39.3686 69.0532 39.3596 68.9551 40.8047 67.9753C42.3944 66.8973 44.5598 66.418 46.7969 66.2565C40.3225 64.5177 36.3631 61.3429 34.9924 57.0863C34.5387 55.6784 34.4681 55.7498 35.9952 55.3861C37.4877 55.0308 39.4091 54.8411 41.1318 54.7615C36.0468 51.8671 33.0077 48.3201 32.2341 44.3984C31.5045 40.6971 32.2556 41.6468 35.2102 42.7072C48.4147 47.4477 61.5787 52.5381 69.3729 60.0746Z"
                fill="white"/>
          <path id="outline"
                d="M67.744 55.3916L68.269 55.795L68.5133 55.1797C71.9098 46.6262 75.9625 40.6293 80.6254 36.067L80.2757 35.7096L80.6254 36.067C81.5879 35.1251 82.4672 34.3109 83.2156 33.6871C83.8609 33.1492 84.6991 32.4982 85.5081 32.2057C85.5081 32.2057 85.5082 32.2057 85.5083 32.2056L85.5092 32.2053L85.5095 32.2052C85.7297 32.1256 86.9192 31.7053 88.0339 32.4235L88.2591 32.5686L88.5046 32.4615C90.0171 31.8016 91.2902 31.3695 92.3 31.1954C92.7984 31.1094 93.4553 31.0446 94.1175 31.1894C94.7063 31.3182 95.6259 31.7216 96.1131 32.6565L96.2652 32.9484L96.5935 32.924C96.7665 32.9112 96.9336 32.9023 97.0947 32.8972C97.9153 32.8714 98.8692 32.9321 99.7035 33.2988L99.9047 32.8411L99.7035 33.2988C100.143 33.4921 100.707 33.8399 101.122 34.4618C101.576 35.1396 101.701 35.9181 101.577 36.6324C101.37 37.8285 100.519 38.6339 100.008 39.0522L99.9823 39.0733L99.9806 39.0748L99.9571 39.0937L99.3009 39.623L100.08 39.945C107.135 42.86 113.251 48.807 115.589 58.1372L115.67 58.4607L116 58.5102C119.619 59.0531 122.911 58.9524 126.066 58.0121C126.889 57.767 127.779 57.9608 128.425 58.5255C129.072 59.0901 129.383 59.9467 129.25 60.7945C129.044 62.1151 128.412 63.1827 127.568 64.0518L126.939 64.7001L127.822 64.8891C128.579 65.051 129.233 65.5592 129.568 66.2829C129.994 67.2027 129.823 68.2887 129.134 69.0325C126.042 72.3713 121.516 74.0933 116.328 74.5069L116 74.533L115.894 74.8436C111.844 86.6912 103.573 95.2455 93.36 100.684L93.595 101.126L93.36 100.684C68.5099 113.919 31.8892 112.255 13.3041 87.6113C12.5567 86.6203 12.6496 85.2311 13.5222 84.3484C14.3948 83.4657 15.7829 83.3569 16.7824 84.0929C26.1456 90.9872 39.1872 93.1155 50.0842 86.5312L50.8325 86.0791L50.0633 85.6634C48.58 84.8618 47.4482 83.7312 46.8458 82.2484C46.2756 80.845 46.3168 79.3678 46.8582 78.0111L47.0676 77.4865L46.5214 77.3424C42.9319 76.3954 40.1485 74.5642 38.2013 71.7588L38.2012 71.7586L38.1798 71.7279L38.1798 71.7278C37.9872 71.4508 37.7216 71.0672 37.5317 70.6908C37.3254 70.2819 36.9981 69.4866 37.2142 68.5067C37.4202 67.572 38.0116 66.9884 38.3272 66.709C38.4664 66.5857 38.6217 66.463 38.7818 66.3442L39.3608 65.9147L38.7556 65.5229C35.7645 63.5868 33.6383 61.0404 32.6128 57.8562L32.6127 57.8561C32.6001 57.8168 32.5853 57.7718 32.5697 57.7241L32.5696 57.7237L32.5695 57.7236L32.5691 57.7222L32.569 57.7221L32.5684 57.7202L32.5684 57.7201L32.5681 57.7192L32.568 57.7191C32.4849 57.4656 32.3732 57.1238 32.31 56.8567L32.31 56.8565L32.3073 56.8453L32.3073 56.8452C32.2428 56.5732 32.0155 55.5951 32.5812 54.6065C32.9646 53.9366 33.5327 53.5799 33.9367 53.3946L34.586 53.0969L34.0841 52.5888C31.8505 50.3274 30.3472 47.7542 29.7814 44.8856C29.6039 43.9853 29.4523 43.0838 29.4773 42.343C29.4897 41.9749 29.5492 41.3491 29.9011 40.7282C30.3336 39.965 31.0513 39.4783 31.8528 39.3189C32.5003 39.1901 33.0665 39.3019 33.3645 39.3739C33.6991 39.4547 34.0249 39.5718 34.2842 39.6703C34.5551 39.7733 34.7692 39.8596 34.9818 39.9454L34.9821 39.9455C35.2928 40.0708 35.5983 40.194 36.055 40.3579C47.4741 44.4575 59.4007 48.9813 67.744 55.3916Z"
                stroke="black" strokeMiterlimit="5.75877"
                strokeLinecap="round"/>
        
        </g>
      </svg>
    
    
    </TwitterIcon> );
  
};

const TwitterIcon = styled.div`

svg {
overflow: visible;
}

position: relative;
display: flex;
margin: 3rem;
width: 150px;
height: 150px;
justify-content: center;
align-items: center;
align-self: center;

#outline {
  fill: transparent;
  stroke: ${ props => props.hovering ? "#6EBEDF" : "transparent" };
  transform-origin: ${ props => props.boundingBox.x + "px " +
  props.boundingBox.y + "px" };
  transform: ${ props => props.hovering ? "scale(2)" : "" };
  stroke-width: 1;
animation: ${ props => props.hovering ?
  "twitterDash 10s linear infinite, scale 1s ease" : "" };
stroke-dasharray: ${ props => `${ props.length / 10 }px, ${ props.length /
5 }px` };


}

#twitter-background{
  fill: ${ props => props.hovering ? "transparent" : "#6EBEDF" };
  transition: all 1s ease;
  transform-origin: ${ props => props.boundingBox.x + "px " +
  props.boundingBox.y + "px" };
  transform: ${ props => props.hovering ? "scale(2)" : "" };
}

#bird {
  transform-origin: ${ props => props.boundingBox.x + "px " +
  props.boundingBox.y + "px" };
  fill: ${ props => props.hovering ? "#6EBEDF" : "white" };
  transform: ${ props => props.hovering ? "scale(2)" : "" };
  transition: all 1s ease;
}

  @keyframes twitterDash {
  ${ props => {
  
  return `
    0% {
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dashoffset: ${ props.length }px;
    }
    100% {
      stroke-dashoffset: ${ props.length * 2 }px;
    }
  }
    
    `;
} };

}

`;

TwitterBird.propTypes = {};

export default TwitterBird;